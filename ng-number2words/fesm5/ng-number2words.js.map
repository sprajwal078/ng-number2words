{"version":3,"file":"ng-number2words.js.map","sources":["ng://ng-number2words/lib/word-mapping/english.ts","ng://ng-number2words/lib/word-mapping/nepali.ts","ng://ng-number2words/lib/word-mapping/index.ts","ng://ng-number2words/lib/converterUtil.ts","ng://ng-number2words/lib/to-words.pipe.ts","ng://ng-number2words/lib/to-hindu-arabic-words.pipe.ts","ng://ng-number2words/lib/ng-number2words.module.ts"],"sourcesContent":["export const TENTH_MAPPING_EN: any = {\r\n  10:            'ten',\r\n  20:            'twenty',\r\n  30:            'thirty',\r\n  40:            'forty',\r\n  50:            'fifty',\r\n  60:            'sixty',\r\n  70:            'seventy',\r\n  80:            'eighty',\r\n  90:            'ninety',\r\n  100:           'hundred',\r\n  1000:          'thousand',\r\n  1000000:       'million',\r\n  1000000000:    'billion',\r\n  1000000000000: 'trillion',\r\n};\r\n\r\nexport const SUB_TWENTIES_MAPPING_EN = {\r\n  0:  'zero',\r\n  1:  'one',\r\n  2:  'two',\r\n  3:  'three',\r\n  4:  'four',\r\n  5:  'five',\r\n  6:  'six',\r\n  7:  'seven',\r\n  8:  'eight',\r\n  9:  'nine',\r\n  10: 'ten',\r\n  11: 'eleven',\r\n  12: 'twelve',\r\n  13: 'thirteen',\r\n  14: 'fourteen',\r\n  15: 'fifteen',\r\n  16: 'sixteen',\r\n  17: 'seventeen',\r\n  18: 'eighteen',\r\n  19: 'nineteen',\r\n};\r\n\r\nexport const HINDU_ARABIC_TENTH_MAPPING_EN: any = {\r\n  10:           'ten',\r\n  20:           'twenty',\r\n  30:           'thirty',\r\n  40:           'forty',\r\n  50:           'fifty',\r\n  60:           'sixty',\r\n  70:           'seventy',\r\n  80:           'eighty',\r\n  90:           'ninety',\r\n  100:          'hundred',\r\n  1000:         'thousand',\r\n  100000:       'lakh',\r\n  10000000:     'crore',\r\n  1000000000:   'arab',\r\n  100000000000: 'kharab',\r\n};\r\n","export const SUB_HUNDRED_NP: string[] = [\r\n  // 0 - 10\r\n  'à¤¶à¥à¤¨à¥à¤¯', 'à¤à¤', 'à¤¦à¥à¤', 'à¤¤à¥à¤¨', 'à¤à¤¾à¤°', 'à¤ªà¤¾à¤à¤', 'à¤', 'à¤¸à¤¾à¤¤', 'à¤à¤ ', 'à¤¨à¥', 'à¤¦à¤¶',\r\n  // 11 - 20\r\n  'à¤à¤à¤¾à¤°', 'à¤¬à¤¾à¤¹à¥à¤°', 'à¤¤à¥à¤¹à¥à¤°', 'à¤à¥à¤§', 'à¤ªà¤¨à¥à¤§à¥à¤°', 'à¤¸à¥à¤¹à¥à¤°', 'à¤¸à¤¤à¥à¤°', 'à¤à¤ à¤¾à¤°', 'à¤à¤¨à¥à¤¨à¤¾à¤à¤¸', 'à¤¬à¥à¤¸',\r\n  // 21 - 30à¤à¤¨à¤¨à¥à¤¤à¤¿à¤¸\r\n  'à¤à¤à¥à¤à¤¾à¤à¤¸', 'à¤¬à¤¾à¤à¤¸', 'à¤¤à¥à¤¯à¥à¤à¤¸', 'à¤à¥à¤¬à¥à¤¸', 'à¤ªà¤à¥à¤à¥à¤¸', 'à¤à¤¬à¥à¤¬à¥à¤¸', 'à¤¸à¤¤à¥à¤¤à¤¾à¤à¤¸', 'à¤à¤ à¥à¤ à¤¾à¤à¤¸', 'à¤à¤¨à¤¨à¥à¤¤à¥à¤¸', 'à¤¤à¥à¤¸',\r\n  // 31 - 40\r\n  'à¤à¤à¥à¤¤à¥à¤¸', 'à¤¬à¤¤à¥à¤¤à¥à¤¸', 'à¤¤à¥à¤¤à¥à¤¤à¤¿à¤¸', 'à¤à¥à¤à¤¤à¥à¤¸', 'à¤ªà¥à¤à¤¤à¥à¤¸', 'à¤à¤¤à¥à¤¤à¥à¤¸', 'à¤¸à¤°à¥à¤¤à¥à¤¸', 'à¤à¤°à¥à¤¤à¥à¤¸', 'à¤à¤¨à¤¨à¥à¤à¤¾à¤²à¥à¤¸', 'à¤à¤¾à¤²à¥à¤¸',\r\n  // 41 - 50\r\n  'à¤à¤à¤à¤¾à¤²à¥à¤¸', 'à¤¬à¤¯à¤¾à¤²à¥à¤¸', 'à¤¤à¥à¤°à¤¿à¤à¤¾à¤²à¥à¤¸', 'à¤à¤µà¤¾à¤²à¥à¤¸', 'à¤ªà¥à¤à¤¤à¤¾à¤²à¥à¤¸', 'à¤à¤¯à¤¾à¤²à¥à¤¸', 'à¤¸à¤°à¥à¤à¤¾à¤²à¥à¤¸', 'à¤à¤°à¥à¤à¤¾à¤²à¥à¤¸', 'à¤à¤¨à¤¨à¥à¤à¤¾à¤¸', 'à¤ªà¤à¤¾à¤¸',\r\n  // 51 - 60\r\n  'à¤à¤à¤¾à¤à¤¨à¥à¤¨', 'à¤¬à¤¾à¤à¤¨à¥à¤¨', 'à¤¤à¥à¤°à¤¿à¤ªà¤¨à¥à¤¨', 'à¤à¥à¤µà¤¨à¥à¤¨', 'à¤ªà¤à¤ªà¤¨à¥à¤¨', 'à¤à¥à¤ªà¥à¤ªà¤¨à¥à¤¨', 'à¤¸à¤¨à¥à¤¤à¤¾à¤à¤¨à¥à¤¨', 'à¤à¤¨à¥à¤ à¤¾à¤à¤¨à¥à¤¨', 'à¤à¤¨à¤¾à¤¨à¥à¤¸à¤¾à¤ à¥à¤ à¥', 'à¤¸à¤¾à¤ à¥à¤ à¥',\r\n  // 61 - 70\r\n  'à¤à¤à¤¸à¤à¥à¤ à¥', 'à¤¬à¥à¤¸à¤à¥à¤ à¥', 'à¤¤à¥à¤°à¤¿à¤¸à¤à¥à¤ à¥', 'à¤à¥à¤à¤¸à¤ à¥à¤ à¥', 'à¤ªà¥à¤à¤¸à¤ à¥à¤ à¥', 'à¤à¥à¤à¤¸à¤ à¥à¤ à¥', 'à¤¸à¤°à¥à¤¸à¤ à¥à¤ à¥', 'à¤à¤°à¥à¤¸à¤ à¥à¤ à¥', 'à¤à¤¨à¤¨à¥à¤¸à¤¤à¥à¤¤à¤°à¥', 'à¤¸à¤¤à¥à¤¤à¤°à¥',\r\n  // 71 - 80\r\n  'à¤à¤à¤¤à¥à¤¤à¤°', 'à¤¬à¤¹à¤¤à¥à¤¤à¤°', 'à¤¤à¥à¤°à¥à¤¹à¤¤à¥à¤¤à¤°', 'à¤à¥à¤°à¤¤à¥à¤¤à¤°', 'à¤ªà¤à¤¹à¤¤à¥à¤¤à¤°', 'à¤à¤¯à¤¤à¥à¤¤à¤°', 'à¤¸à¤¤à¤¹à¤¤à¥à¤¤à¤°', 'à¤à¤ à¤¹à¤¤à¥à¤¤à¤°', 'à¤à¤¨à¤¾à¤¸à¥à¤¸à¥', 'à¤à¤¸à¥à¤¸à¥',\r\n  // 81 - 90\r\n  'à¤à¤à¤¾à¤¸à¥à¤¸à¥', 'à¤¬à¤¯à¤¾à¤¸à¥à¤¸à¥', 'à¤¤à¥à¤°à¤¿à¤¯à¤¾à¤¸à¥à¤¸à¥', 'à¤à¥à¤°à¤¸à¥à¤¸à¥', 'à¤ªà¤à¤¾à¤¸à¥à¤¸à¥', 'à¤à¤¾à¤¯à¤¾à¤¸à¥à¤¸à¥', 'à¤¸à¤¤à¥à¤¤à¤¾à¤¸à¥à¤¸à¥', 'à¤à¤ à¤¾à¤¸à¥à¤¸à¥', 'à¤à¤¨à¤¨à¥à¤¨à¤¾à¤¬à¥à¤¬à¥', 'à¤¨à¤¬à¥à¤¬à¥',\r\n  // 91 - 99\r\n  'à¤à¤à¤¾à¤¨à¥à¤¨à¤¬à¥à¤¬à¥', 'à¤¬à¤¯à¤¾à¤¨à¥à¤¨à¤¬à¥à¤¬à¥', 'à¤¤à¥à¤°à¤¿à¤¯à¤¾à¤¨à¥à¤¨à¤¬à¥à¤¬à¥', 'à¤à¥à¤°à¤¾à¤¨à¥à¤¨à¤¬à¥à¤¬à¥', 'à¤ªà¤¨à¥à¤à¤¾à¤¨à¥à¤¨à¤¬à¥à¤¬à¥', 'à¤à¤¾à¤¯à¤¾à¤¨à¥à¤¨à¤¬à¥à¤¬à¥', 'à¤¸à¤¨à¥à¤¤à¤¾à¤¨à¥à¤¨à¤¬à¥à¤¬à¥', 'à¤à¤¨à¥à¤ à¤¾à¤¨à¥à¤¨à¤¬à¥à¤¬à¥', 'à¤à¤¨à¤¨à¥à¤¸à¤¯'\r\n];\r\n\r\nexport const TENTH_MAPPING_NP: any = {\r\n  1:            'à¤à¤',\r\n  10:           'à¤¦à¤¶',\r\n  100:          'à¤¸à¤¯',\r\n  1000:         'à¤¹à¤à¤¾à¤°',\r\n  100000:       'à¤²à¤¾à¤',\r\n  10000000:     'à¤à¤°à¥à¤¡',\r\n  1000000000:   'à¤à¤°à¥à¤¬',\r\n  100000000000: 'à¤à¤°à¥à¤¬'\r\n};\r\n\r\nexport enum OtherWordsNp {\r\n  minus = 'à¤®à¤¾à¤à¤¨à¤¸',\r\n  point = 'à¤¦à¤¶à¤®à¤²à¤¬'\r\n}\r\n","import { TENTH_MAPPING_EN, SUB_TWENTIES_MAPPING_EN, HINDU_ARABIC_TENTH_MAPPING_EN } from './english';\r\nimport { TENTH_MAPPING_NP, SUB_HUNDRED_NP } from './nepali';\r\n\r\nexport const WORD_MAPPING = {\r\n  international: {\r\n    en: {\r\n      tenths: TENTH_MAPPING_EN,\r\n      subHundreds: SUB_TWENTIES_MAPPING_EN,\r\n      negativeWord: 'minus',\r\n      decimalWord: 'point'\r\n    },\r\n  },\r\n  hinduArabic: {\r\n    en: {\r\n      tenths: HINDU_ARABIC_TENTH_MAPPING_EN,\r\n      subHundreds: SUB_TWENTIES_MAPPING_EN,\r\n      negativeWord: 'minus',\r\n      decimalWord: 'point'\r\n    },\r\n    np: {\r\n      tenths: TENTH_MAPPING_NP,\r\n      subHundreds: SUB_HUNDRED_NP,\r\n      negativeWord: 'à¤®à¤¾à¤à¤¨à¤¸',\r\n      decimalWord: 'à¤¦à¤¶à¤®à¤²à¤¬'\r\n    }\r\n  }\r\n};\r\n\r\nexport enum WordValues {\r\n  hundred   = 100,\r\n  thousand  = 1000,\r\n  million   = 1000000,\r\n  billion   = 1000000000,\r\n  trillion  = 1000000000000,\r\n\r\n  // hindu arabic\r\n  lakh      = 100000,\r\n  crore     = 10000000,\r\n  arab      = 1000000000,\r\n  kharab    = 100000000000,\r\n}\r\n","import { WORD_MAPPING, WordValues } from './word-mapping';\r\n\r\nexport class ConverterUtil {\r\n  private words: string[] = [];\r\n  value: number | string;\r\n  maxValue: number;\r\n  tenthMapping: any;\r\n  subHundredMapping: any;\r\n  decimalNotation: string;\r\n  negativeNotation: string;\r\n\r\n  constructor(\r\n    value: number | string,\r\n    tenthMapping: any = WORD_MAPPING.international.en.tenths,\r\n    subHundredMapping: any = WORD_MAPPING.international.en.subHundreds,\r\n    max: number = (1000 * WordValues.trillion - 1),\r\n    decimalNotation = 'point',\r\n    negativeNotation = 'minus'\r\n  ) {\r\n    if (typeof (value) === 'string') {\r\n      if (isNaN(+value)) {\r\n        console.error(`value not number: ${value} is not a number. Please ensure the value is a number`);\r\n      }\r\n      value = +value;\r\n    }\r\n    if (value > max) {\r\n      console.error(`value not supported: ${value} exceeds the max value`);\r\n    }\r\n    this.value = value;\r\n    if ((this.value || this.value === 0) && value <= max) {\r\n      value = +value;\r\n      this.tenthMapping = tenthMapping;\r\n      this.subHundredMapping = subHundredMapping;\r\n      this.maxValue = max;\r\n      this.decimalNotation = decimalNotation;\r\n      this.negativeNotation = negativeNotation;\r\n      const isNegative = value < 0;\r\n      //  deal with negative number\r\n      if (isNegative) {\r\n        value = Math.abs(value);\r\n        this.words = [this.negativeNotation];\r\n      }\r\n      // deal with decimal number\r\n      let decimalWords: string[] = [];\r\n      const valueAfterPoint = /\\.\\d+/.exec(value.toString());\r\n      if (valueAfterPoint) {\r\n        decimalWords = this.convertDecimalToWords(valueAfterPoint[0]);\r\n      }\r\n      value = Math.floor(value);\r\n      this.words = [...this.words, ...this.convertToWords(value), ...decimalWords];\r\n    }\r\n  }\r\n\r\n  convertToWords(value: number | null): string[] {\r\n    if (value === null || value === undefined) {\r\n      return [];\r\n    }\r\n    // to convert the number to words we first check if the number is below 100\r\n    //  if below 100 then simply use the convertSubHundredToWords() and set wordsValue\r\n    if (value < 100) {\r\n      return this.convertSubHundredToWords(value);\r\n    }\r\n    //  if the value is over 99 we first find the length of the string of the value\r\n    //  eg if the value is 1234513, the length is 7.\r\n    //  then we find which category of the mapping does the current number falls in\r\n    //  eg, when length is 7, the value falls under the 1000000: 'million' category\r\n    // to do this we get the 10 power (length-1), then check if the value exists in the mapping\r\n    const length = value.toString().length;\r\n    let pow10 = 10 ** (length - 1);\r\n\r\n    // it is not necessary that the length matches a category\r\n    // eg, when length is 5, the value falls under the 'ten thousand' category\r\n    // but the mapping for ten thousand doesn't exist in the map\r\n    // so we have to keep dividing the power by 10 until we find the appropriate match\r\n    let category = '';\r\n    while (!category) {\r\n      category = this.tenthMapping[pow10] || '';\r\n      if (!category) {\r\n        pow10 /= 10;\r\n      }\r\n    }\r\n\r\n    // since we found the category, we will now separate the number by the number of 0 in the pow10\r\n    // eg if value is 12340, pow10 is 1000, so we want to separae 12 and 34o so we can make it 'twelve' 'thousand'\r\n    // we could divide the number by the pow10 but for numbers like 1230, the 0 is lost during the operation\r\n    const numberof0s = /0+/.exec(pow10.toString())[0].length;\r\n    const prefix = value.toString().slice(0, length - numberof0s);\r\n    const suffix = +value.toString().slice(-numberof0s);\r\n    return [...this.convertToWords(+prefix), category, ...this.convertToWords(suffix ? suffix : null)];\r\n  }\r\n\r\n  convertSubHundredToWords(value: number): string[] {\r\n    // return the value if it already exists on the subHundredMapping object\r\n    // eg, if subHundredMapping has {1: 'one'} and the value passed is 1\r\n    // we return ['one']\r\n    if (this.subHundredMapping[value]) {\r\n      return [this.subHundredMapping[value]];\r\n    }\r\n    // divide the number by 10 then get the suffix and prefix so we can convert them to words\r\n    // eg, if the value passed is 23, we divide it by 10, so we get 2.3\r\n    // now we can multiply 2 by 10 and map (each 20 and 3) it using the subHundredMapping object\r\n    // so the result is ['twenty', 'three']\r\n    const splitValue = (value / 10).toString().split('.'); // split value will look like ['20', '3']\r\n    return [this.tenthMapping[+splitValue[0] * 10], this.subHundredMapping[splitValue[1]]];\r\n  }\r\n\r\n  convertDecimalToWords(decimal: string): string[] {\r\n    const decimalValues = decimal.split('');\r\n    return decimalValues.map(dec => {\r\n      if (dec === '.') {\r\n        return this.decimalNotation;\r\n      }\r\n      return this.subHundredMapping[dec];\r\n    });\r\n  }\r\n\r\n  getWords() {\r\n    return this.words.filter(word => !!word).join(' ');\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ConverterUtil } from './converterUtil';\r\n\r\n@Pipe({\r\n  name: 'toWords'\r\n})\r\nexport class ToWordsPipe implements PipeTransform {\r\n\r\n  transform(value: number | string): any {\r\n    const converter = new ConverterUtil(value);\r\n    return converter.getWords();\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ConverterUtil } from './converterUtil';\r\nimport { WORD_MAPPING, WordValues } from './word-mapping';\r\n\r\n@Pipe({\r\n  name: 'toHinduArabicWords'\r\n})\r\nexport class ToHinduArabicWordsPipe implements PipeTransform {\r\n\r\n  transform(value: number | string, language = 'en'): any {\r\n    const converter = new ConverterUtil(\r\n      value,\r\n      WORD_MAPPING.hinduArabic[language].tenths,\r\n      WORD_MAPPING.hinduArabic[language].subHundreds,\r\n      (100 * WordValues.kharab - 1),\r\n      WORD_MAPPING.hinduArabic[language].decimalWord,\r\n      WORD_MAPPING.hinduArabic[language].negativeWord\r\n    );\r\n    return converter.getWords();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ToWordsPipe } from './to-words.pipe';\r\nimport { ToHinduArabicWordsPipe } from './to-hindu-arabic-words.pipe';\r\n\r\n@NgModule({\r\n  declarations: [ToWordsPipe, ToHinduArabicWordsPipe],\r\n  exports: [ToWordsPipe, ToHinduArabicWordsPipe]\r\n})\r\nexport class NgNumber2wordsModule { }\r\n"],"names":[],"mappings":"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"}
