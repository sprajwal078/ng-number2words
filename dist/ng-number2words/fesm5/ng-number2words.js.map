{"version":3,"file":"ng-number2words.js.map","sources":["ng://ng-number2words/lib/word-map.ts","ng://ng-number2words/lib/to-words.pipe.ts","ng://ng-number2words/lib/ng-number2words.module.ts"],"sourcesContent":["export enum WordValues {\r\n  hundred = 100,\r\n  thousand = 1000,\r\n  million = 1000000,\r\n  billion = 1000000000,\r\n  trillion = 1000000000000,\r\n}\r\n\r\nexport const SUB_TWENTIES_MAPPING: any = {\r\n  0: 'zero',\r\n  1: 'one',\r\n  2: 'two',\r\n  3: 'three',\r\n  4: 'four',\r\n  5: 'five',\r\n  6: 'six',\r\n  7: 'seven',\r\n  8: 'eight',\r\n  9: 'nine',\r\n  10: 'ten',\r\n  11: 'eleven',\r\n  12: 'twelve',\r\n  13: 'thirteen',\r\n  14: 'fourteen',\r\n  15: 'fifteen',\r\n  16: 'sixteen',\r\n  17: 'seventeen',\r\n  18: 'eighteen',\r\n  19: 'nineteen',\r\n  20: 'twenty'\r\n};\r\n\r\nexport const TENTH_MAPPING: any = {\r\n  10: 'ten',\r\n  20: 'twenty',\r\n  30: 'thirty',\r\n  40: 'forty',\r\n  50: 'fifty',\r\n  60: 'sixty',\r\n  70: 'seventy',\r\n  80: 'eighty',\r\n  90: 'ninety',\r\n  100: 'hundred',\r\n  1000: 'thousand',\r\n  1000000: 'million',\r\n  1000000000: 'billion',\r\n  1000000000000: 'trillion',\r\n};\r\n\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { WordValues, SUB_TWENTIES_MAPPING, TENTH_MAPPING } from './word-map';\n\n@Pipe({\n  name: 'toWords'\n})\nexport class ToWordsPipe implements PipeTransform {\n  subHundredRanges: { min: number, max: number }[] = [\n    {\n      min: 20,\n      max: 30\n    },\n    {\n      min: 30,\n      max: 40\n    },\n    {\n      min: 40,\n      max: 50\n    },\n    {\n      min: 50,\n      max: 60\n    },\n    {\n      min: 60,\n      max: 70\n    },\n    {\n      min: 70,\n      max: 80\n    },\n    {\n      min: 80,\n      max: 90\n    },\n    {\n      min: 90,\n      max: 100\n    }\n  ];\n  ranges: { min: number, max: number }[] = [\n    {\n      min: WordValues.hundred,\n      max: WordValues.thousand\n    },\n    {\n      min: WordValues.thousand,\n      max: WordValues.million\n    },\n    {\n      min: WordValues.million,\n      max: WordValues.billion\n    },\n    {\n      min: WordValues.billion,\n      max: WordValues.trillion\n    },\n    {\n      min: WordValues.trillion,\n      max: 999 * WordValues.trillion\n    },\n  ];\n\n  transform(value: any, args?: any): any {\n    if (typeof (value) !== 'number') {\n      if (isNaN(+value)) {\n        console.error(`value not number: ${value} is not a number. Please ensure the value is a number`);\n        return null;\n      }\n      console.warn(\n        `'${value}' converted to number: for best results, please ensure you provide number instead of string`\n      );\n      value = +value;\n    }\n    const words = this.convertToWord(value);\n    return words.join(' ');\n  }\n\n  convertToWord(number, words = [], ignoreZero = false) {\n    if (number > (999 * WordValues.trillion)) {\n      console.error(`value not supported: ${number} exceeds the max value which is 999 trillion`);\n      return [];\n    }\n    if (number < 0) {\n      words.push('minus');\n      return this.convertToWord(Math.abs(number), words);\n    }\n    if (number <= 20) {\n      if (number === 0 && ignoreZero) {\n        return words;\n      }\n      words.push(SUB_TWENTIES_MAPPING[number]);\n    }\n\n    for (const minMax of this.subHundredRanges) {\n      if (number >= minMax.min && number < minMax.max) {\n        words.push(...this.convertReminderToWord(number, minMax.min));\n        break;\n      }\n    }\n\n    for (const minMax of this.ranges) {\n      if (number >= minMax.min && number < minMax.max) {\n        const prefix = this.convertToWord(+Math.floor((number / minMax.min)).toFixed());\n        words.push(...prefix, TENTH_MAPPING[minMax.min]);\n        return this.convertToWord(number % minMax.min, words, true);\n      }\n    }\n    return words;\n  }\n\n  convertReminderToWord(value, number) {\n    const reminder = value % number;\n    return reminder ? [TENTH_MAPPING[number], SUB_TWENTIES_MAPPING[reminder]] : [TENTH_MAPPING[number]];\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { ToWordsPipe } from './to-words.pipe';\n\n@NgModule({\n  declarations: [ToWordsPipe],\n  imports: [\n  ],\n  exports: []\n})\nexport class NgNumber2wordsModule { }\n"],"names":["tslib_1.__values"],"mappings":";;;;;;;;;IACE,YAAa;IACb,cAAe;IACf,gBAAiB;IACjB,mBAAoB;IACpB,uBAAwB;;;;;;;;AAG1B,IAAa,oBAAoB,GAAQ;IACvC,CAAC,EAAE,MAAM;IACT,CAAC,EAAE,KAAK;IACR,CAAC,EAAE,KAAK;IACR,CAAC,EAAE,OAAO;IACV,CAAC,EAAE,MAAM;IACT,CAAC,EAAE,MAAM;IACT,CAAC,EAAE,KAAK;IACR,CAAC,EAAE,OAAO;IACV,CAAC,EAAE,OAAO;IACV,CAAC,EAAE,MAAM;IACT,EAAE,EAAE,KAAK;IACT,EAAE,EAAE,QAAQ;IACZ,EAAE,EAAE,QAAQ;IACZ,EAAE,EAAE,UAAU;IACd,EAAE,EAAE,UAAU;IACd,EAAE,EAAE,SAAS;IACb,EAAE,EAAE,SAAS;IACb,EAAE,EAAE,WAAW;IACf,EAAE,EAAE,UAAU;IACd,EAAE,EAAE,UAAU;IACd,EAAE,EAAE,QAAQ;CACb;;AAED,IAAa,aAAa,GAAQ;IAChC,EAAE,EAAE,KAAK;IACT,EAAE,EAAE,QAAQ;IACZ,EAAE,EAAE,QAAQ;IACZ,EAAE,EAAE,OAAO;IACX,EAAE,EAAE,OAAO;IACX,EAAE,EAAE,OAAO;IACX,EAAE,EAAE,SAAS;IACb,EAAE,EAAE,QAAQ;IACZ,EAAE,EAAE,QAAQ;IACZ,GAAG,EAAE,SAAS;IACd,IAAI,EAAE,UAAU;IAChB,OAAO,EAAE,SAAS;IAClB,UAAU,EAAE,SAAS;IACrB,aAAa,EAAE,UAAU;CAC1B;;;;;;;IC5CD;QAIE,qBAAgB,GAAmC;YACjD;gBACE,GAAG,EAAE,EAAE;gBACP,GAAG,EAAE,EAAE;aACR;YACD;gBACE,GAAG,EAAE,EAAE;gBACP,GAAG,EAAE,EAAE;aACR;YACD;gBACE,GAAG,EAAE,EAAE;gBACP,GAAG,EAAE,EAAE;aACR;YACD;gBACE,GAAG,EAAE,EAAE;gBACP,GAAG,EAAE,EAAE;aACR;YACD;gBACE,GAAG,EAAE,EAAE;gBACP,GAAG,EAAE,EAAE;aACR;YACD;gBACE,GAAG,EAAE,EAAE;gBACP,GAAG,EAAE,EAAE;aACR;YACD;gBACE,GAAG,EAAE,EAAE;gBACP,GAAG,EAAE,EAAE;aACR;YACD;gBACE,GAAG,EAAE,EAAE;gBACP,GAAG,EAAE,GAAG;aACT;SACF,CAAC;QACF,WAAM,GAAmC;YACvC;gBACE,GAAG,EAAE,UAAU,CAAC,OAAO;gBACvB,GAAG,EAAE,UAAU,CAAC,QAAQ;aACzB;YACD;gBACE,GAAG,EAAE,UAAU,CAAC,QAAQ;gBACxB,GAAG,EAAE,UAAU,CAAC,OAAO;aACxB;YACD;gBACE,GAAG,EAAE,UAAU,CAAC,OAAO;gBACvB,GAAG,EAAE,UAAU,CAAC,OAAO;aACxB;YACD;gBACE,GAAG,EAAE,UAAU,CAAC,OAAO;gBACvB,GAAG,EAAE,UAAU,CAAC,QAAQ;aACzB;YACD;gBACE,GAAG,EAAE,UAAU,CAAC,QAAQ;gBACxB,GAAG,EAAE,GAAG,GAAG,UAAU,CAAC,QAAQ;aAC/B;SACF,CAAC;KAuDH;;;;;;IArDC,+BAAS;;;;;IAAT,UAAU,KAAU,EAAE,IAAU;QAC9B,IAAI,QAAQ,KAAK,CAAC,KAAK,QAAQ,EAAE;YAC/B,IAAI,KAAK,CAAC,CAAC,KAAK,CAAC,EAAE;gBACjB,OAAO,CAAC,KAAK,CAAC,uBAAqB,KAAK,0DAAuD,CAAC,CAAC;gBACjG,OAAO,IAAI,CAAC;aACb;YACD,OAAO,CAAC,IAAI,CACV,MAAI,KAAK,gGAA6F,CACvG,CAAC;YACF,KAAK,GAAG,CAAC,KAAK,CAAC;SAChB;;YACK,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC;QACvC,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACxB;;;;;;;IAED,mCAAa;;;;;;IAAb,UAAc,MAAM,EAAE,KAAU,EAAE,UAAkB;QAA9B,sBAAA,EAAA,UAAU;QAAE,2BAAA,EAAA,kBAAkB;;QAClD,IAAI,MAAM,IAAI,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,EAAE;YACxC,OAAO,CAAC,KAAK,CAAC,0BAAwB,MAAM,iDAA8C,CAAC,CAAC;YAC5F,OAAO,EAAE,CAAC;SACX;QACD,IAAI,MAAM,GAAG,CAAC,EAAE;YACd,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACpB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;SACpD;QACD,IAAI,MAAM,IAAI,EAAE,EAAE;YAChB,IAAI,MAAM,KAAK,CAAC,IAAI,UAAU,EAAE;gBAC9B,OAAO,KAAK,CAAC;aACd;YACD,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;SAC1C;;YAED,KAAqB,IAAA,KAAAA,SAAA,IAAI,CAAC,gBAAgB,CAAA,gBAAA,4BAAE;gBAAvC,IAAM,MAAM,WAAA;gBACf,IAAI,MAAM,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,EAAE;oBAC/C,KAAK,CAAC,IAAI,OAAV,KAAK,WAAS,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,MAAM,CAAC,GAAG,CAAC,GAAE;oBAC9D,MAAM;iBACP;aACF;;;;;;;;;;YAED,KAAqB,IAAA,KAAAA,SAAA,IAAI,CAAC,MAAM,CAAA,gBAAA,4BAAE;gBAA7B,IAAM,MAAM,WAAA;gBACf,IAAI,MAAM,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,EAAE;;wBACzC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,GAAG,MAAM,CAAC,GAAG,EAAE,CAAC,OAAO,EAAE,CAAC;oBAC/E,KAAK,CAAC,IAAI,OAAV,KAAK,WAAS,MAAM,GAAE,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,IAAE;oBACjD,OAAO,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,MAAM,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;iBAC7D;aACF;;;;;;;;;QACD,OAAO,KAAK,CAAC;KACd;;;;;;IAED,2CAAqB;;;;;IAArB,UAAsB,KAAK,EAAE,MAAM;;YAC3B,QAAQ,GAAG,KAAK,GAAG,MAAM;QAC/B,OAAO,QAAQ,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,oBAAoB,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;KACrG;;gBAhHF,IAAI,SAAC;oBACJ,IAAI,EAAE,SAAS;iBAChB;;IAgHD,kBAAC;CAlHD;;;;;;ACHA;IAGA;KAMqC;;gBANpC,QAAQ,SAAC;oBACR,YAAY,EAAE,CAAC,WAAW,CAAC;oBAC3B,OAAO,EAAE,EACR;oBACD,OAAO,EAAE,EAAE;iBACZ;;IACmC,2BAAC;CANrC;;;;;;;;;;;;;;"}
